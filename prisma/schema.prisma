// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  username       String         @unique
  email          String         @unique
  password       String
  createdAt      DateTime       @default(now())
  song_likes     SongLike[]
  tokens         Token[]
  playlists      Playlist[]
  album_likes    AlbumLike[]
  artist_follows ArtistFollow[]
}

model Token {
  id           String   @id @default(uuid())
  jwtSecretKey String
  user_id      String
  user         User     @relation(fields: [user_id], references: [id])
  createdAt    DateTime @default(now())
}

model SongLike {
  id         Int      @id @default(autoincrement())
  user_id    String
  song_id    String
  user       User     @relation(fields: [user_id], references: [id])
  song       Song     @relation(fields: [song_id], references: [id])
  created_at DateTime @default(now())

  @@unique([user_id, song_id])
}

model AlbumLike {
  id         Int      @id @default(autoincrement())
  user_id    String
  album_id   String
  user       User     @relation(fields: [user_id], references: [id])
  album      Album    @relation(fields: [album_id], references: [id])
  created_at DateTime @default(now())

  @@unique([user_id, album_id])
}

model ArtistFollow {
  id         Int      @id @default(autoincrement())
  user_id    String
  artist_id  String
  user       User     @relation(fields: [user_id], references: [id])
  artist     Artist   @relation(fields: [artist_id], references: [id])
  created_at DateTime @default(now())

  @@unique([user_id, artist_id])
}

model Artist {
  id          String         @id @default(uuid())
  name        String         @unique
  nationality String
  albums      Album[]
  songs       Song[]
  follows     ArtistFollow[]
}

model Album {
  id           String      @id @default(uuid())
  name         String
  release_date DateTime
  album_image  String?
  artist_id    String
  color_id     String?
  artist       Artist      @relation(fields: [artist_id], references: [id])
  color        Color?      @relation(fields: [color_id], references: [id])
  songs        Song[]
  likes        AlbumLike[]

  @@unique([name, artist_id])
}

model Song {
  id             String         @id @default(uuid())
  name           String
  duration       String?
  artist_id      String
  artist         Artist?        @relation(fields: [artist_id], references: [id])
  album_id       String
  album          Album          @relation(fields: [album_id], references: [id], onDelete: Cascade)
  likes          SongLike[]
  playlist_songs PlaylistSong[]
  track          String?        @unique

  @@unique([name, artist_id])
}

model Playlist {
  id             String         @id @default(uuid())
  name           String
  description    String?
  image          String
  release_date   DateTime
  duration       Int?
  user_id        String
  user           User           @relation(fields: [user_id], references: [id])
  playlist_songs PlaylistSong[]

  @@unique([name, user_id])
}

model PlaylistSong {
  id          String   @id @default(uuid())
  song_id     String
  song        Song     @relation(fields: [song_id], references: [id])
  playlist_id String
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@unique([song_id, playlist_id])
}

model Color {
  id    String  @id @default(uuid())
  name  String
  color String  @unique
  album Album[]
}
